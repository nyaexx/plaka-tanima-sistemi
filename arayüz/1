import tkinter as tk
from tkinter import filedialog, messagebox, simpledialog
import cv2
from PIL import Image, ImageTk
from datetime import datetime

root = tk.Tk()
root.title("Gelişmiş Program Arayüzü")
root.geometry("800x500")
root.configure(bg="#2b2b2b")

# Seçilen dosya yolu
DOSYA_YOLU = "C:\\Users\\PC\\Desktop\\plakalar\\veri.txt"
current_page = None  
previous_content = []

# Global bileşenler
listbox_frame = None
listbox = None
scrollbar = None
search_entry = None
camera_label = None  # camera_label'i global olarak tanımla
cap = None

def read_plate_data():
    try:
        with open(DOSYA_YOLU, "r", encoding="utf-8") as file:
            plate_data = file.readlines()
            print(f"Dosya açıldı: {DOSYA_YOLU}")  
            return plate_data
    except FileNotFoundError:
        print("Dosya bulunamadı!")
        return ["Plaka verisi bulunamadı."]
    except Exception as e:
        print(f"Dosya okunurken hata oluştu: {e}")
        return ["Dosya okunurken hata oluştu."]

def update_plate_list():
    global previous_content
    if current_page == "Plakalar":  # Sadece Plakalar sayfasında listeyi güncelle
        plate_data = read_plate_data()
    
        print("Güncel Veri:", plate_data)  # Hata ayıklama için
        print("Önceki Veri:", previous_content)  # Hata ayıklama için
        
        listbox.delete(0, tk.END)  # Önceki içerikleri temizle
        for plate in plate_data:
            listbox.insert(tk.END, plate.strip())
        previous_content = plate_data

def add_plate():
    # Kullanıcıdan plaka bilgisi al
    new_plate = simpledialog.askstring("Plaka Ekle", "Yeni plakayı girin:")
    if new_plate:  # Eğer kullanıcı bir şey girdiyse
        try:
            # Dosyaya yeni plakayı ekle
            with open(DOSYA_YOLU, "a", encoding="utf-8") as file:
                file.write(f"{new_plate}\n")
            # Listbox'ı güncelle
            update_plate_list()
            messagebox.showinfo("Başarılı", "Plaka başarıyla eklendi!")
        except Exception as e:
            messagebox.showerror("Hata", f"Plaka eklenirken hata oluştu: {e}")

def delete_plate():
    # Seçili plakayı al
    selected_plate = listbox.get(tk.ACTIVE)
    
    # Eğer bir plaka seçilmediyse uyarı göster
    if not selected_plate:
        messagebox.showwarning("Uyarı", "Lütfen bir plaka seçin!")
        return
    
    # Onay mesajı göster
    confirm = messagebox.askyesno("Plaka Sil", f"'{selected_plate}' plakasını silmek istediğinize emin misiniz?")
    
    if confirm:  # Eğer kullanıcı onaylarsa
        try:
            # Dosyadan seçili plakayı sil
            with open(DOSYA_YOLU, "r", encoding="utf-8") as file:
                lines = file.readlines()
            
            # Seçili plakayı hariç tutarak dosyayı yeniden yaz
            with open(DOSYA_YOLU, "w", encoding="utf-8") as file:
                plate_found = False
                for line in lines:
                    if line.strip() != selected_plate:  # Seçili plakayı atla
                        file.write(line)
                    else:
                        plate_found = True  # Plaka bulundu
            
            # Plakanın silinip silinmediğini kontrol et
            if plate_found:
                messagebox.showinfo("Başarılı", f"'{selected_plate}' plakası başarıyla silindi!")
            else:
                messagebox.showwarning("Uyarı", f"'{selected_plate}' plakası dosyada bulunamadı!")
            
            # Listbox'ı güncelle ve arama sonuçlarını yenile
            update_plate_list()
            search_plate()  # Arama sonuçlarını yenile
        
        except Exception as e:
            messagebox.showerror("Hata", f"Plaka silinirken hata oluştu: {e}")

def search_plate():
    search_text = search_entry.get().strip().lower()  # Kullanıcının girdiği metni al
    if not search_text:  # Eğer arama kutusu boşsa, tüm plakaları göster
        update_plate_list()
        return
    
    # Listbox'taki tüm plakaları al
    all_plates = listbox.get(0, tk.END)
    
    # Filtrelenmiş plakaları bul
    filtered_plates = [plate for plate in all_plates if search_text in plate.lower()]
    
    # Listbox'ı güncelle
    listbox.delete(0, tk.END)
    for plate in filtered_plates:
        listbox.insert(tk.END, plate)

def toggle_fullscreen(event=None):
    # Tam ekran modunu aç/kapat
    root.attributes("-fullscreen", not root.attributes("-fullscreen"))

def show_camera():
    global camera_label, cap

    # Kamera başlat
    cap = cv2.VideoCapture(0, cv2.CAP_DSHOW)  # CAP_DSHOW backend'i kullan

    def update_frame():
        if cap is None or not cap.isOpened():  # Eğer kamera başlatılmamışsa
            return
        
        ret, frame = cap.read()
        if ret:
            # Görüntüyü yeniden boyutlandır
            frame = cv2.resize(frame, (960, 540))  # İstediğiniz boyutu ayarlayın

            # Tarih, saat ve gün bilgilerini al
            now = datetime.now()
            date_time = now.strftime("%d/%m/%Y %H:%M:%S")
            day = now.strftime("%A")

            # Bilgileri kameranın üzerine yazdır
            font = cv2.FONT_HERSHEY_SIMPLEX
            font_scale = 0.8
            font_thickness = 2
            text_color = (255, 255, 255)  # Beyaz renk
            bg_color = (0, 0, 0)  # Siyah arka plan

            # Tarih ve saat bilgisini yazdır
            (text_width, text_height), _ = cv2.getTextSize(date_time, font, font_scale, font_thickness)
            cv2.rectangle(frame, (10, 10), (10 + text_width, 10 + text_height + 10), bg_color, -1)  # Arka plan
            cv2.putText(frame, date_time, (10, 10 + text_height), font, font_scale, text_color, font_thickness)

            # Gün bilgisini yazdır
            (text_width, text_height), _ = cv2.getTextSize(day, font, font_scale, font_thickness)
            cv2.rectangle(frame, (10, 50), (10 + text_width, 50 + text_height + 10), bg_color, -1)  # Arka plan
            cv2.putText(frame, day, (10, 50 + text_height), font, font_scale, text_color, font_thickness)

            # Görüntüyü PIL formatına çevir
            cv2image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            img = Image.fromarray(cv2image)
            imgtk = ImageTk.PhotoImage(image=img)
            # Görüntüyü label'a ekle
            camera_label.imgtk = imgtk
            camera_label.configure(image=imgtk)
        # Görüntüyü sürekli güncelle
        camera_label.after(10, update_frame)

    # Kamera görüntüsünü göster
    update_frame()

def stop_camera():
    global cap
    if cap:
        cap.release()
        cap = None
    if camera_label:
        camera_label.configure(image=None)

# F11 tuşuna basıldığında tam ekran modunu tetikle
root.bind("<F11>", toggle_fullscreen)

# Yan Menü (Sidebar)
sidebar = tk.Frame(root, bg="#333", width=200, height=500)
sidebar.pack(side="left", fill="y")

# İçerik Alanı
content_frame = tk.Frame(root, bg="#444", width=600, height=500)
content_frame.pack(side="right", fill="both", expand=True)

# Sayfa değiştirme
def switch_page(page_name):
    global listbox, scrollbar, listbox_frame, current_page, search_entry, camera_label, cap  
    current_page = page_name  # Sayfa adını takip et

    # İçerik alanını temizle
    for widget in content_frame.winfo_children():
        if widget not in [listbox_frame, camera_label]:  # listbox_frame ve camera_label'i silme
            widget.destroy()
    
    # Sayfa başlığını oluştur
    label = tk.Label(content_frame, text=page_name, font=("Arial", 20), fg="white", bg="#444")
    label.pack(pady=10)
    
    if page_name == "Ana Sayfa":
        # Kamera görüntüsü için label oluştur
        if camera_label is None:
            camera_label = tk.Label(content_frame, bg="#444")
            camera_label.pack(pady=10)
        
        # Kamera akışını yeniden başlat
        if cap is None or not cap.isOpened():
            show_camera()
    else:
        # Diğer sayfalarda kamera görüntüsünü gizle ve kamera akışını durdur
        if camera_label:
            camera_label.pack_forget()  # Kamera görüntüsünü gizle
        stop_camera()  # Kamera akışını durdur

    if page_name == "Plakalar":
        # Arama kısmını oluştur
        search_frame = tk.Frame(content_frame, bg="#444")
        search_frame.pack(pady=10)

        # Arama giriş kutusu
        search_entry = tk.Entry(search_frame, font=("Arial", 12), bg="#555", fg="white", width=40)
        search_entry.pack(side=tk.LEFT, padx=5)

        # Ara butonu
        search_button = tk.Button(search_frame, text="Ara", font=("Arial", 12), bg="#666", fg="white", command=search_plate)
        search_button.pack(side=tk.LEFT)

        # listbox_frame ve bileşenleri daha önce oluşturulmamışsa oluştur
        if listbox_frame is None:
            listbox_frame = tk.Frame(content_frame, bg="#444")
            listbox_frame.pack(pady=10)

            # Butonlar için bir frame oluştur
            button_frame = tk.Frame(listbox_frame, bg="#444")
            button_frame.pack(side=tk.LEFT, fill=tk.Y, padx=10)

            # Plaka Ekle butonu
            add_button = tk.Button(button_frame, text="Plaka Ekle", font=("Arial", 12), bg="#666", fg="white", command=add_plate)
            add_button.pack(pady=5, fill=tk.X)

            # Plaka Sil butonu
            delete_button = tk.Button(button_frame, text="Plaka Sil", font=("Arial", 12), bg="#666", fg="white", command=delete_plate)
            delete_button.pack(pady=5, fill=tk.X)

            scrollbar = tk.Scrollbar(listbox_frame, orient=tk.VERTICAL)
            listbox = tk.Listbox(listbox_frame, font=("Arial", 14), bg="#555", fg="white", width=50, height=15, yscrollcommand=scrollbar.set)
            scrollbar.config(command=listbox.yview)

            listbox.pack(side=tk.LEFT, fill=tk.BOTH)
            scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # listbox_frame'i göster
        listbox_frame.pack(pady=10)

        # Seçili dosya varsa listeyi güncelle
        update_plate_list()
    else:
        # Diğer sayfalarda listbox_frame'i gizle
        if listbox_frame:
            listbox_frame.pack_forget()

# Sidebar Butonları
buttons = [
    ("Ana Sayfa", lambda: switch_page("Ana Sayfa")),
    ("Plakalar", lambda: switch_page("Plakalar")),
    ("Hakkında", lambda: switch_page("Hakkında"))
]

for text, command in buttons:
    btn = tk.Button(sidebar, text=text, font=("Arial", 14), bg="#555", fg="white", padx=10, pady=5, relief="flat", command=command)
    btn.pack(pady=10, fill="x")

# İlk sayfa açılışı
switch_page("Ana Sayfa")

# Ana döngüyü başlat
root.mainloop()
